# REV02 Thu Jul  2 12:51:48 WIB 2020
# REV01 Sun Jun 28 19:41:12 WIB 2020
# START Mon Jun 22 15:42:22 WIB 2020
====================================
PERHATIKAN TANGGAL REVISI DI ATAS
=================================

1. Pelajari keluaran/script berkas "K04-TEST-RESULT.txt".

2. Setiap anggota memilih berkas mulai dari "p00.c", "p01.c", dst.

3. Berkas "share.c" dan "share.h" dibagi (share) bersama.

4. Agar tidak mulai dari NOL, telah disediakan rangka program/ fungsi ala kadarnya.

5. Tugas kelompok ialah melengkapi/ memodifikasi berkas "share.c" dan "share.h" bersama-sama.

6. Harap mencantumkan (akunGitHub), pihak yang melakukan pelengkapan/ memodifikasi.

7. Jika diinginkan, silakan mengubah TOTAL isi program/ fungsi yang telah disiapkan.

6. Yang harus tetap:
== a. isi "struct usrinfo" dan "struct myshare" dalam "share.h" tidak boleh diubah.
== b. nama berkas untuk "SharedMemory" harus "SharedMemoryFile.bin".
== c. nama berkas masing-masing anggota harus p00.c, p01.c, dst.

7. Yang perlu diubah ialah nilai "delay":
== a. Nilai default "delay" berturut-turut: (p00.c: 3), (p01.c: 1), (p02.c: 1), (p03.c: 2), (p04.c: 1), (p05.c: 8).
== b. Berapa pun nilai delay, program tidak boleh "hang".
== c. Bagaimana pun urutan delay, "p00" harus selalu exit paling akhir.

8. Ganti isi variabel "akunGitHub" dengan nama akun GitHub masing-masing.

9. Akses "SharedMemory" secara MUTEX.  Gunakan semafor "mutex".
== a. Setiap kali mengakses "mutex", "mutexctr++".
== b. Pengecualian, state (OPEN/CLOSED/0) diakses tanpa memeriksa semafor "mutex".
== c. Pengecualian, inisialisasi semafor "mutex" tanpa memeriksa semafor "mutex".
== d. Inisialisasi semafor (SharedMemory) dengan fungsi "sem_init (&(mymap->mutex), 1, MUTEX)".

10. Proses "p00":
== a. Saat inisialisasi, state=0;
== b. Hanya "p00" yang dapat menset state menjadi "OPEN" atau "CLOSED".
== c. Tanpa argumen, proses "p00" akan memanggil "p01", "p02", dst.
== d. Tanpa argumen, proses "p00" selalu exit paling akhir, serta merubah state=CLOSED.
== e. Dengan sembarang argumen, proses "p00" membuat state=OPEN, lalu langsung exit.
== f. Kecuali state=OPEN, "p00" akan reset ShareMemory.

11. Proses "p01", "p01", "p02", ...
== a. Tanpa berkas  SharedMemory, p01, p02, dst. langsung exit.
== b. Jika state=CLOSED, p01, p02, dst. langsung exit.
== c. Jika state=OPEN, p01, p02, dst. dapat mengakses SharedMemory.

12. Berkas "K00-TEST-KIT.txt"
== a. Setiap anggota melakukan test terpisah
== b. Gunakan berkas "K00-TEST-KIT.txt" sebagai patokan testing.

13. Berkas "K04-TEST-RESULT.txt"
== a. akunGH0[Boss is Waiting] dalam "initBoss()", p00 akan menunggu hingga semua "NoBosses" dalam keadaan siap.
== b. akunGH0[All NoBosses are ready!] p00 selesai menunggu.
== c. akunGH1[Good Bye initNoBoss()!] p01, p02, ... selesai menjalankan "initNoBoss()".
== d. akunGH1[Yes, I am ready!] Siapa pun (p00, p01, p02, ...) harus menunggu isyarat dari p00.
===== Isyarat p00 baru diberikan setelah  "All NoBosses are ready!" (butir 13.b di atas).
== e. Masukkan hasil test ke berkas "K04-TEST-RESULT.txt"
== f. Jika DEADLINE masih jauh, silakan mengembangkan "doBoss()" dan "doNotBoss()".
===== Tentunya, sesuai dengan kreatifitas masing-masing.

14. Info Tambahan
#define AKUNSIZE     30    // Jumlah karakter dalam string "akinGitHub" (minus 1).
#define BOSS         0     // Boss (p00)
#define NOTBOSS      1     // NOTBOSS (p01, p02, ...)
#define CHMOD        0666  // Mode -rw-rw-rw (read-write)
#define CLOSED       127   // state==CLOSED; "SharedMemory" TIDAK boleh diakses.
#define MAXPROGS     20    // Maximum program. Jika diperlukan, silakan diubah.
#define OPEN         255   // state==OPEN;   "SharedMemory" boleh diakses.
#define SHAREMEM     "SharedMemoryFile.bin" // nama berkas "SharedMemory"
#define SSYNC         0    // sem_init (&(mymap->sync),  SSHARE, SSYNC);
#define SMUTEX        1    // sem_init (&(mymap->mutex), SSHARE, SMUTEX);
#define SSHARE        1    //
#define tmpSize      1024  // alokasi cetak
typedef struct {
    char  akun [AKUNSIZE]; // penempatan string "akunGitHub".
    int   value;           // sebuah nilai
    sem_t sync;            // semafor untuk sinkronisasi
} usrinfo;

typedef struct {
    usrinfo progs[MAXPROGS+1];
    int     entry;        // usrinfo yang kosong.
    int     state;        // lihat OPEN/CLOSED.
    int     mutexctr;     // jumlah penggunaan semafor mutex.
    sem_t   mutex;        // semafor mutex agar hanya satu yang akses ShareMemory pada satu saat.
    sem_t    sync;        // semafor untuk sinkronisasi
} myshare;

=====================
void checkOpen(void);
Langsing exit, jika state=CLOSED.

========================
void display(int entry);  // menampilkan
// akunGH5[progs[05] TIME[035] MMAP[OPEN] VALUE[400] [akunGH1][akunGH4][akunGH2][akunGH3][akunGH0][akunGH5]]
// akunGitHub entry "mutexctr""OPEN/CLOSE""value"    "entry akunGitHub dalam memory" 

=======================
void doBoss(int entry);
// Hal spesifik bagi Boss (p00).
// Untuk pengembangan lanjut.

=======================
void doNotBoss(int entry);
// Hal spesifik bagi yang bukan Boss (p01, p02, ...)
// Untuk pengembangan lanjut.

========================
int  getEntry(char* akunGitHub);
jika sudah ada dalam SharedMemory, kembalikan nomor posisi.
jika belum ada dalam SharedMemory, kembalikan nomor ++entry.

==============================================
void init(int isboss, int argc, char* argv[]);
// init sistem;

==============================================
void initBoss(int argc, char* argv[]);
// init sistem spesifik Boss (p00).

==============================================
void initNotBoss(void);
// init sistem yang bukan Boss (p01, p02, ...).

=====================================
void myprint(char* str1, char* str2);
// cetak str1 dan str2.

=================================
void myWait(int boss, int entry);
jika BOSS: 1) state=CLOSED dan 2) tunggu hingga semua proses lain exit.

====================================
void putInfo(char* akun, int entry);
// masukkan string "akunGitHub" ke dalam ShareMemory.

15. Jangan lupa bersih-bersih.
== a. Harap "make clean" sebelum mengumpulkan berkas.

JT!
